name: BTC Lottery

on:
  schedule:
    - cron: "0 10 * * *"
  workflow_dispatch:

env:
  POOL_SIZE: 15      # Pool size range (1 to POOL_SIZE)
  WINNER_COUNT: 2    # Number of winners

jobs:
  lottery:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch BTC Latest Block Hash
        id: fetch-hash
        run: |
          response=$(curl -s https://blockchain.info/latestblock)
          block_hash=$(echo $response | jq -r '.hash')
          echo "block_hash=$block_hash" >> $GITHUB_OUTPUT
          echo "## ðŸ”— Block Information" >> $GITHUB_STEP_SUMMARY
          echo "- Block Hash: \`$block_hash\`" >> $GITHUB_STEP_SUMMARY

      - name: Perform Lottery
        id: lottery
        run: |
          POOL_SIZE=${{ env.POOL_SIZE }}
          WINNER_COUNT=${{ env.WINNER_COUNT }}
          BLOCK_HASH="${{ steps.fetch-hash.outputs.block_hash }}"
          SEED=$((0x${BLOCK_HASH: -8}))
          echo "seed=$SEED" >> $GITHUB_OUTPUT
          
          echo "import random" > lottery.py
          echo "import json" >> lottery.py
          echo "" >> lottery.py
          echo "pool_size = ${POOL_SIZE}" >> lottery.py
          echo "winner_count = ${WINNER_COUNT}" >> lottery.py
          echo "seed = ${SEED}" >> lottery.py
          echo "" >> lottery.py
          echo "random.seed(seed)" >> lottery.py
          echo "winners = random.sample(range(1, pool_size + 1), winner_count)" >> lottery.py
          echo "" >> lottery.py
          echo "result = {" >> lottery.py
          echo "    \"winners\": winners," >> lottery.py
          echo "    \"seed\": seed," >> lottery.py
          echo "    \"pool_size\": pool_size," >> lottery.py
          echo "    \"winner_count\": winner_count" >> lottery.py
          echo "}" >> lottery.py
          echo "" >> lottery.py
          echo "with open('lottery_result.json', 'w') as f:" >> lottery.py
          echo "    json.dump(result, f)" >> lottery.py
          echo "" >> lottery.py
          echo "print(f\"ðŸŽ‰ Lottery Results: {winners}\")" >> lottery.py
          echo "print(f\"winners_str={','.join(map(str, winners))}\")" >> lottery.py
          
          python3 lottery.py > output.txt
          
          # Extract winners_str from output and save to GITHUB_OUTPUT
          winners_str=$(grep "winners_str=" output.txt | cut -d'=' -f2)
          echo "winners=$winners_str" >> $GITHUB_OUTPUT
          
          echo "## ðŸŽ² Lottery Results" >> $GITHUB_STEP_SUMMARY
          echo "- Pool Size: $POOL_SIZE" >> $GITHUB_STEP_SUMMARY
          echo "- Number of Winners: $WINNER_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "- Random Seed: $SEED" >> $GITHUB_STEP_SUMMARY
          echo "- Winning Numbers: $winners_str" >> $GITHUB_STEP_SUMMARY

      - name: Upload Results
        uses: actions/upload-artifact@v4
        with:
          name: lottery-results
          path: lottery_result.json
          retention-days: 90

      - name: Generate Result File
        run: |
          echo "# ðŸŽ² Lottery Results ($(date '+%Y-%m-%d'))" > result.md
          echo "" >> result.md
          echo "## Block Information" >> result.md
          echo "- Block Hash: \`${{ steps.fetch-hash.outputs.block_hash }}\`" >> result.md
          echo "- Random Seed: ${{ steps.lottery.outputs.seed }}" >> result.md
          echo "" >> result.md
          echo "## Lottery Results" >> result.md
          echo "- Pool Size: ${{ env.POOL_SIZE }}" >> result.md
          echo "- Number of Winners: ${{ env.WINNER_COUNT }}" >> result.md
          echo "- ðŸŽ‰ Winning Numbers: ${{ steps.lottery.outputs.winners }}" >> result.md
          echo "" >> result.md
          echo "> Generated at: $(date '+%Y-%m-%d %H:%M:%S')" >> result.md

      - name: Upload Result Summary
        uses: actions/upload-artifact@v4  # Updated to v4
        with:
          name: lottery-summary
          path: result.md
          retention-days: 90
